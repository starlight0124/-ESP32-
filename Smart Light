//引入需要用到的库函数
#include "WiFi.h"
#include "ESPAsyncWebServer.h"
#include "DHT.h"

int led=16;
int ledState=0;

//设置网络的账号和密码
const char *ssid = "FAST_C6D2";
const char *password = "197406274157";

//定义传感器引脚
#define DHTPIN 33   //温湿度

//定义DHT对象和webserver对象
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
AsyncWebServer server(80);

//web服务器页面设计 使用HTML语言
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      rel="stylesheet"
      href="https://use.fontawesome.com/releases/v5.7.2/css/all.css"
      integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr"
      crossorigin="anonymous"
    />
    <style>
      html {
        font-family: "Microsoft Yahei";//设置字体为微软雅黑
        display: inline-block;
        margin: 0px auto;
        text-align: center;
      }
      h2 {
        font-size: 3rem;
      }
      p {
        font-size: 3rem;
      }
      .units {
        font-size: 1.2rem;
      }
      .sensor-labels {
        font-size: 1.5rem;
        vertical-align: middle;
        padding-bottom: 15px;
      }
      .switch {
        position: relative;
        display: inline-block;
        width: 120px;
        height: 68px;
      }
      .slider {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        border-radius: 34px;
      }
      .slider:before {
        position: absolute;
        content: "";
        height: 52px;
        width: 52px;
        left: 8px;
        bottom: 8px;
        background-color: #fff;
        -webkit-transition: 0.4s;
        transition: 0.4s;
        border-radius: 68px;
      }
      input:checked + .slider {
        background-color: #2196f3;
      }
      input:checked + .slider:before {
        -webkit-transform: translateX(52px);
        -ms-transform: translateX(52px);
        transform: translateX(52px);
      }
    </style>
  </head>
  <body>
    <h2>智能家居数据中心</h2>
    <p>
      <i class="fas fa-lightbulb" style="color:#ffac4d;"></i>
      <span class="sensor-labels">LED</span>
        <label class="switch">
          <input type="checkbox" onchange="toggleCheckbox(this)"/>
          <span class="slider"></span>
        </label>
    </p>
    <p>
      <i class="fas fa-thermometer-half" style="color:#059e8a;"></i>
      <span class="sensor-labels">温度</span>
      <span id="temperature">%TEMPERATURE%</span>
      <sup class="units">&deg;C</sup>
    </p>
    <p>
      <i class="fas fa-tint" style="color:#00add6;"></i>
      <span class="sensor-labels">湿度</span>
      <span id="humidity">%HUMIDITY%</span>
      <sup class="units">%</sup>
    </p>
  </body>
  <script>
    function toggleCheckbox(element) {
      var xhttp = new XMLHttpRequest();
      if (element.checked) {
        xhttp.open("GET", "/led=" + "on", true);
      } else {
        xhttp.open("GET", "/led=" + "off", true);
      }
      xhttp.send();
    };
    setInterval(function() {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          document.getElementById("temperature").innerHTML = this.responseText;
        }
      };
      xhttp.open("GET", "/temperature", true);
      xhttp.send();
    }, 2000);
    setInterval(function() {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          document.getElementById("humidity").innerHTML = this.responseText;
        }
      };
      xhttp.open("GET", "/humidity", true);
      xhttp.send();
    }, 2000);
   </script>
</html>)rawliteral";

//读取DHT11温湿度传感器
String readDHTTemperature() {
  float temperature = dht.readTemperature();
  if (isnan(temperature)) {
    Serial.println("Failed to read from DHT sensor!");
    return "--";
  }
  else {
    Serial.println(temperature);
    return String(temperature);
  }
}

String readDHTHumidity() {
  float humidity = dht.readHumidity();
  if (isnan(humidity)) {
    Serial.println("Failed to read from DHT sensor!");
    return "--";
  }
  else {
    Serial.println(humidity);
    return String(humidity);
  }
}

//将网页中的占位符替换为相应的传感器数值
String processor(const String& var) {
  if (var == "TEMPERATURE") {
    return readDHTTemperature();
  }
  if (var == "HUMIDITY") {
    return readDHTHumidity();
  }
  return String();
}

void setup()
{
  //初始化
  Serial.begin(115200);
  dht.begin();
  pinMode(led,OUTPUT);

  //连接网络
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }
  Serial.println("WiFi connected");

  //在串口中显示IP地址
  Serial.print("Open your brower, and visit: http://");
  Serial.println(WiFi.localIP());
  Serial.println();

  //web服务器设置
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send_P(200, "text/html", index_html,processor);
  });

  //当led=on时，设置照明灯为亮
  server.on("/led=on", HTTP_GET, [](AsyncWebServerRequest *request) {
    digitalWrite(led,HIGH);
    ledState=1;
    Serial.println("Light is on");
    request->send_P(200, "text/plain", "led on");
  });

  //当led=off时，设置照明灯为灭
  server.on("/led=off", HTTP_GET, [](AsyncWebServerRequest *request) {
    digitalWrite(led,LOW);
    ledState=0;
    Serial.println("Light is off");
    request->send_P(200, "text/plain", "led off");
  });
   
   //访问传感器温度值
  server.on("/temperature", HTTP_GET, [](AsyncWebServerRequest *request) {
    Serial.print("Temperature: ");
    Serial.println(readDHTTemperature());
    request->send_P(200, "text/plain", readDHTTemperature().c_str());
  });

  //访问传感器湿度值
  server.on("/humidity", HTTP_GET, [](AsyncWebServerRequest *request) {
    Serial.print("Humidity: ");
    Serial.println(readDHTHumidity());
    request->send_P(200, "text/plain", readDHTHumidity().c_str());
  });
  
  //运行web服务器
  server.begin();
}

void loop()
{
}
